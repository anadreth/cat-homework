/**
 * ImportButton - Import dashboard or widget from JSON file
 *
 * Handles file upload, validation, and importing into Redux
 */

import { useRef } from "react";
import { useAppDispatch } from "@/store/hooks";
import { importDashboard, addWidget } from "@/store";
import {
  readJSONFile,
  validateDashboardImport,
  validateWidgetImport,
} from "@/utils/import";
import { RiUploadLine } from "@remixicon/react";

export function ImportButton() {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const dispatch = useAppDispatch();

  const handleFileSelect = async (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const json = await readJSONFile(file);

      const dashboardResult = validateDashboardImport(json);
      if (dashboardResult.success) {
        const confirmed = window.confirm(
          `Import dashboard "${dashboardResult.data.name}"?\n\nThis will replace your current dashboard. Make sure you've exported your current work first.`
        );

        if (confirmed) {
          dispatch(importDashboard(dashboardResult.data));
          alert("Dashboard imported successfully!");
        }

        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
        return;
      }

      const widgetResult = validateWidgetImport(json);
      if (widgetResult.success) {
        const widgetData = widgetResult.data;

        // Add widget to dashboard (IDs will be generated by addWidget action)
        // IMPORTANT: Don't spread widgetData.layout because it contains the old ID
        // The addWidget prepare callback generates a new ID for consistency
        dispatch(
          addWidget({
            type: widgetData.widget.type,
            layout: {
              x: 0,
              y: 0,
              w: widgetData.layout.w,
              h: widgetData.layout.h,
              minW: widgetData.layout.minW,
              minH: widgetData.layout.minH,
              maxW: widgetData.layout.maxW,
              maxH: widgetData.layout.maxH,
              locked: widgetData.layout.locked,
              noResize: widgetData.layout.noResize,
              noMove: widgetData.layout.noMove,
            },
            props: widgetData.widget.props,
          })
        );

        alert(
          `Widget imported successfully!\n\nType: ${
            widgetData.widgetType
          }\nOriginal source: ${widgetData.exportedFrom || "Unknown"}`
        );

        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
        return;
      }

      alert(
        `Import failed: Invalid file format\n\nDashboard error: ${dashboardResult.error}\nWidget error: ${widgetResult.error}`
      );
    } catch (error) {
      alert(
        `Import failed: ${
          error instanceof Error ? error.message : "Unknown error"
        }`
      );
      console.error("[Import] Error:", error);
    }

    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  return (
    <>
      <input
        ref={fileInputRef}
        type="file"
        accept=".json,application/json"
        onChange={handleFileSelect}
        className="hidden"
        aria-label="Import JSON file"
      />

      <button
        onClick={() => fileInputRef.current?.click()}
        className="flex items-center gap-1.5 rounded border border-gray-300 px-3 py-1.5 text-sm font-medium text-gray-700 hover:bg-gray-50"
        title="Import dashboard or widget"
      >
        <RiUploadLine size={16} />
        <span>Import</span>
      </button>
    </>
  );
}
